param n, integer, >= 2; /*liczba wierzchołków */

/*zbiór wierzchołków V i zbiów krawędzi E*/

set V, default {0..n};

set E, within V cross V;

/*parametr selekcjonujący krawędzie*/
param w{(i,j) in E} > 0;

var a{(i,j) in E}, >= 0;

var m, >=0;

maximize match: sum{(i,j) in E} a[i,j];


/* gdy krawędź należy do skoajarzenia ma wartość 1 w przeciwnym przypadku 0
 wierzchołek może być końcem co najwyzej jednej krawędzi należącej do skojarzenia więc suma dla wszystkich krawędzi których jest końcem może być co najwyżej równa 1*/
s.t. node{i in V}:
		sum{(j,i) in E} a[j,i] + sum{(i,j) in E} a[i,j] <= 1;

solve;
	
	printf{0..56} "="; printf "\n";
	printf "Maximum bipartite matching: %g\n", match;
	printf{0..56} "="; printf "\n";

data;


param n := 127;
param : E : w := 
0 91 1
0 74 1
0 106 1
0 81 1
0 88 1
0 64 1
1 120 1
1 122 1
1 85 1
1 118 1
1 92 1
1 127 1
2 116 1
2 67 1
2 115 1
2 77 1
2 117 1
2 80 1
3 107 1
3 108 1
3 105 1
3 75 1
3 83 1
3 86 1
4 85 1
4 117 1
4 81 1
4 118 1
4 65 1
4 79 1
5 107 1
5 121 1
5 104 1
5 115 1
5 67 1
5 98 1
6 100 1
6 122 1
6 71 1
6 68 1
6 73 1
6 85 1
7 117 1
7 123 1
7 74 1
7 114 1
7 94 1
7 77 1
8 118 1
8 90 1
8 107 1
8 81 1
8 126 1
8 115 1
9 70 1
9 101 1
9 114 1
9 115 1
9 117 1
9 77 1
10 115 1
10 111 1
10 94 1
10 126 1
10 114 1
10 71 1
11 100 1
11 67 1
11 126 1
11 73 1
11 110 1
11 77 1
12 101 1
12 67 1
12 75 1
12 77 1
12 94 1
12 93 1
13 97 1
13 121 1
13 85 1
13 113 1
13 77 1
13 66 1
14 125 1
14 117 1
14 127 1
14 82 1
14 110 1
14 113 1
15 117 1
15 121 1
15 79 1
15 108 1
15 93 1
15 77 1
16 95 1
16 106 1
16 78 1
16 107 1
16 86 1
16 75 1
17 106 1
17 102 1
17 115 1
17 98 1
17 97 1
17 125 1
18 110 1
18 68 1
18 80 1
18 81 1
18 98 1
18 108 1
19 73 1
19 102 1
19 82 1
19 118 1
19 99 1
19 90 1
20 121 1
20 67 1
20 79 1
20 84 1
20 65 1
20 93 1
21 70 1
21 93 1
21 124 1
21 127 1
21 126 1
21 65 1
22 66 1
22 93 1
22 64 1
22 116 1
22 123 1
22 71 1
23 83 1
23 94 1
23 65 1
23 123 1
23 106 1
23 68 1
24 124 1
24 83 1
24 64 1
24 122 1
24 71 1
24 100 1
25 67 1
25 120 1
25 91 1
25 81 1
25 113 1
25 95 1
26 81 1
26 113 1
26 77 1
26 118 1
26 91 1
26 88 1
27 124 1
27 79 1
27 123 1
27 67 1
27 83 1
27 72 1
28 64 1
28 82 1
28 121 1
28 84 1
28 107 1
28 109 1
29 65 1
29 112 1
29 85 1
29 117 1
29 121 1
29 104 1
30 66 1
30 74 1
30 109 1
30 96 1
30 126 1
30 85 1
31 90 1
31 100 1
31 114 1
31 119 1
31 80 1
31 86 1
32 89 1
32 112 1
32 67 1
32 94 1
32 64 1
32 87 1
33 66 1
33 65 1
33 104 1
33 93 1
33 125 1
33 95 1
34 101 1
34 80 1
34 85 1
34 102 1
34 76 1
34 69 1
35 107 1
35 78 1
35 91 1
35 103 1
35 84 1
35 106 1
36 88 1
36 73 1
36 125 1
36 126 1
36 69 1
36 119 1
37 92 1
37 83 1
37 126 1
37 82 1
37 96 1
37 88 1
38 94 1
38 88 1
38 81 1
38 109 1
38 95 1
38 101 1
39 104 1
39 76 1
39 83 1
39 72 1
39 122 1
39 89 1
40 118 1
40 66 1
40 68 1
40 76 1
40 126 1
40 101 1
41 86 1
41 94 1
41 72 1
41 70 1
41 79 1
41 116 1
42 97 1
42 113 1
42 81 1
42 64 1
42 71 1
42 127 1
43 67 1
43 109 1
43 91 1
43 105 1
43 116 1
43 83 1
44 74 1
44 118 1
44 125 1
44 99 1
44 117 1
44 95 1
45 96 1
45 64 1
45 102 1
45 82 1
45 98 1
45 75 1
46 85 1
46 122 1
46 73 1
46 75 1
46 66 1
46 116 1
47 82 1
47 122 1
47 113 1
47 117 1
47 87 1
47 64 1
48 94 1
48 119 1
48 65 1
48 114 1
48 122 1
48 95 1
49 114 1
49 89 1
49 113 1
49 75 1
49 112 1
49 127 1
50 127 1
50 112 1
50 99 1
50 81 1
50 118 1
50 74 1
51 118 1
51 65 1
51 76 1
51 126 1
51 85 1
51 105 1
52 81 1
52 87 1
52 80 1
52 117 1
52 105 1
52 84 1
53 107 1
53 87 1
53 108 1
53 118 1
53 75 1
53 90 1
54 82 1
54 97 1
54 78 1
54 110 1
54 126 1
54 67 1
55 94 1
55 120 1
55 88 1
55 67 1
55 118 1
55 87 1
56 73 1
56 68 1
56 71 1
56 114 1
56 84 1
56 80 1
57 117 1
57 116 1
57 112 1
57 114 1
57 115 1
57 64 1
58 112 1
58 110 1
58 114 1
58 93 1
58 88 1
58 95 1
59 105 1
59 118 1
59 65 1
59 89 1
59 104 1
59 87 1
60 114 1
60 101 1
60 90 1
60 118 1
60 68 1
60 76 1
61 87 1
61 124 1
61 119 1
61 117 1
61 93 1
61 68 1
62 93 1
62 126 1
62 115 1
62 109 1
62 103 1
62 81 1
63 89 1
63 114 1
63 119 1
63 82 1
63 101 1
63 97 1
;
end;
